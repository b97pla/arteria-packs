version: "2.0" # mistral version
name: arteria-packs.ngi_uu_workflow
description: The ngi workflow, from sequencer to remote system...

workflows:
    main:
        type: direct
        input:
            - host
            - runfolder
            - ignore_qc_result
            - bcl2fastq_version
            - barcode_mismatches
            - tiles
            - use_base_mask
            - bcl2fastq_additional_arguments
            - skip_archiving
            - remove_previous_archive_dir
            - skip_download_samplesheet_mount
        output:
            output_the_whole_workflow_context: <% $ %>
        task-defaults:
            on-error:
                - oh_shit_error
                - mark_as_failed

        tasks:
            ### GENERAL TASKS START ###
            note_workflow_repo_version:
              action: core.local
              input:
                cmd: git rev-parse HEAD
                cwd: /opt/stackstorm/packs/arteria-packs/
              on-success:
                - get_config

            get_config:
              action: arteria-packs.get_pack_config
              publish:
                remote_host: <% task(get_config).result.result.remote_host %>
                remote_user: <% task(get_config).result.result.remote_user%>
                remote_destination: <% task(get_config).result.result.remote_destination %>
                summary_host: <% task(get_config).result.result.summary_host %>
                summary_user: <% task(get_config).result.result.summary_user %>
                summary_destination: <% task(get_config).result.result.summary_destination %>
                summary_host_key: <% task(get_config).result.result.summary_host_key %>
                projman_install_location: <% task(get_config).result.result.projman_install_location %>
                projman_connection_string: <% task(get_config).result.result.projman_connection_string %>
                siswrap_service_port: <% task(get_config).result.result.siswrap_service_port %>
                bcl2fastq_service_port: <% task(get_config).result.result.bcl2fastq_service_port %>
                runfolder_service_port: <% task(get_config).result.result.runfolder_service_port %>
                checkqc_service_port: <% task(get_config).result.result.checkqc_service_port %>
                send_mail_to: <% task(get_config).result.result.send_mail_to %>
                remote_sisyphus_location: <% task(get_config).result.result.remote_sisyphus_location %>
                irma_remote_path: <% task(get_config).result.result.irma_remote_path %>
                irma_api_key: <% task(get_config).result.result.irma_api_key %>
                irma_checksum_base_url: <% task(get_config).result.result.irma_checksum_base_url %>
                irma_siswrap_base_url: <% task(get_config).result.result.irma_siswrap_base_url %>
                ngi_pipeline_url: <% task(get_config).result.result.ngi_pipeline_url %>
                irma_replace_expressions: <% task(get_config).result.result.irma_replace_expressions %>
                remote_host_key: <% task(get_config).result.result.remote_host_key %>
                biotank_user_key: <% task(get_config).result.result.biotank_user_key %>
                samplesheet_fallback_path: <% task(get_config).result.result.samplesheet_fallback_path %>
                clinical_host: "hactar.igp.uu.se"
                clinical_user: "ngi"
                send_clinical_mail_to: "operator@clinical-genomics.se"
              on-success:
                 - mark_as_started

            mark_as_started:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "started"}'
                method: "POST"
              on-success:
                - get_runfolder_name

            get_runfolder_name:
              action: core.local
              input:
                cmd: python -c 'import sys; sys.stdout.write("<% $.runfolder %>".split("/")[-1])'
              publish:
                runfolder_name: "<% task(get_runfolder_name).result.stdout %>"
              on-success:
                - get_flowcell_name

            get_flowcell_name:
                action: arteria-packs.get_flowcell_from_runfolder_name
                input:
                    runfolder_name: <% $.runfolder_name %>
                publish:
                    flowcell_name: <% task(get_flowcell_name).result.result %>
                on-success:
                    - download_samplesheet_mount: <% $.skip_download_samplesheet_mount = false %>
                    - download_samplesheet_clarity: <% $.skip_download_samplesheet_mount = true %>

            ### GENERAL TASKS END ###
            ### DEMULTIPLEX START ###

            download_samplesheet_mount:
                action: arteria-packs.download_samplesheet_mount
                input:
                    flowcell_name: <% $.flowcell_name %>
                    samplesheet_path: <% $.samplesheet_fallback_path %>
                publish:
                    samplesheet_string: "<% task(download_samplesheet_mount).result.result %>"
                on-error:
                    - download_samplesheet_clarity
                on-success:
                    - construct_bcl2fastq_body

            download_samplesheet_clarity:
                action: arteria-packs.download_samplesheet_clarity
                input:
                    flowcell_name: <% $.flowcell_name %>
                
                #Add parameter for server or use dev/prod file based authentication/server selection?
                publish:
                    samplesheet_string: "<% task(download_samplesheet_clarity).result.result %>"
                on-success:
                    - construct_bcl2fastq_body

            # Since we don't want to pass empty values into
            # bcl2fastq-ws, we remove any empty keys from
            # this body.
            construct_bcl2fastq_body:
                action: arteria-packs.parse_bcl2fastq_args
                input:
                    samplesheet: "<% $.samplesheet_string %>"
                    bcl2fastq_version: "<% $.bcl2fastq_version %>"
                    barcode_mismatches: "<% $.barcode_mismatches %>"
                    tiles: "<% $.tiles %>"
                    use_base_mask: "<% $.use_base_mask %>"
                    additional_arguments: "<% $.bcl2fastq_additional_arguments %>"
                    create_indexes: "True"
                publish:
                    bcl2fastq_body: <% task(construct_bcl2fastq_body).result.result %>
                on-success:
                    - run_bcl2fastq

            run_bcl2fastq:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.bcl2fastq_service_port %>/api/1.0/start/<% $.runfolder_name %>"
                    timeout: 86400 # Wait for 24 h before timing out.
                    body: <% $.bcl2fastq_body %>
                on-success:
                    - save_bcl2fastq_version

            save_bcl2fastq_version:
                action: core.local
                input:
                    cmd: ssh <% $.host %> "echo <% task(run_bcl2fastq).result.result.response_from_start.response.bcl2fastq_version %> > <% $.runfolder %>/bcl2fastq_version"
                on-success:
                    - run_checkqc

            ## DEMULTIPLEX END ###
            ### CHECKQC START ###
            run_checkqc:
              action: arteria-packs.run_checkqc
              input:
                url: "http://<% $.host %>:<% $.checkqc_service_port %>/qc/<% $.runfolder_name %>"
                ignore_result: <% $.ignore_qc_result %>
              on-success:
                - copy_sisyphus_config
              on-error:
                - copy_sisyphus_config

            copy_sisyphus_config:
                action: core.remote
                input:
                    cmd: "cp -v /opt/arteria/arteria-siswrap-env/deps/sisyphus/sisyphus-latest/sisyphus.yml <% $.runfolder %>/"
                    hosts: <% $.host %>
                    private_key: <% $.biotank_user_key %>
                on-success:
                    - run_sisyphus_check_indices

            ### CHECK INDICES START###
            run_sisyphus_check_indices:
                action: arteria-packs.poll_status
                input:
                    url: "http://<% $.host %>:<% $.siswrap_service_port %>/api/1.0/checkindices/run/<% $.runfolder_name %>"
                    body:
                      runfolder: <% $.runfolder_name %>
                    ignore_result: <% $.ignore_qc_result %>
                on-success:
                    - get_year: <% task(run_checkqc).state = 'SUCCESS'  %>
                    - oh_shit_error: <% task(run_checkqc).state = 'ERROR' %>
                    - mark_as_failed: <% task(run_checkqc).state = 'ERROR' %>
            ### CHECK INDICES END###
            ### TRANSFER FILES TO REMOTE DESTINATIONS START ###
            get_year:
              action: core.local
              input:
                cmd: echo 20$(echo <% $.runfolder_name %> | cut -c1-2)
              publish:
                current_year: <% task(get_year).result.stdout %>
              on-success:
                - rsync_to_summary_host

            rsync_to_summary_host:
                action: arteria-packs.rsync
                input:
                    source: <% $.runfolder %>
                    source_host: <% $.host %>
                    source_host_user: "arteria"
                    dest_server: <% $.summary_host %>
                    dest_user: <% $.summary_user %>
                    destination: <% $.summary_destination %>/<% $.current_year %>
                    include_file: /etc/arteria/misc/summary.rsync
                on-success:
                    - run_projman_filler

            run_projman_filler:
              action: arteria-packs.run_projman_filler
              input:
                hosts: <% $.summary_host %>
                username: <% $.summary_user %>
                projman_connection_string: "<% $.projman_connection_string %>"
                projman_install_location: "<% $.projman_install_location %>"
                summary_destination: "<% $.summary_destination %>"
                current_year: "<% $.current_year %>"
                runfolder_name: "<% $.runfolder_name %>"
                private_key: <% $.summary_host_key %>
              on-success:
                - is_runfolder_clinical

            is_runfolder_clinical:
              action: arteria-packs.is_runfolder_clinical
              input:
                flowcell_name: <% $.flowcell_name %>
              publish:
                clinical_runfolder: <% task(is_runfolder_clinical).result.result %>
              on-success:
                - rsync_to_irma: <% $.clinical_runfolder = false %>
                - rsync_to_clinical_genomics: <% $.clinical_runfolder = true %>

            rsync_to_irma:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: "irma2.uppmax.uu.se"
                    destination_user: "funk_901"
                    destination_path: <% $.irma_remote_path %>
                    rsync_include_file: /etc/arteria/misc/hiseq.rsync
                    md5_output_file: "checksums.md5"
                on-success:
                  - irma_check_md5sums

            irma_check_md5sums:
                action: arteria-packs.poll_status
                input:
                    url: <% $.irma_checksum_base_url %>/start/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                    body:
                      path_to_md5_sum_file: "MD5/checksums.md5"
                    verify_ssl_cert: True
                    irma_mode: True
                on-success:
                  - irma_run_aeacus_stats

            rsync_to_clinical_genomics:
                action: arteria-packs.sync_workflow
                input:
                    runfolder: <% $.runfolder %>
                    runfolder_name: <% $.runfolder_name %>
                    source_host: <% $.host %>
                    source_user: "arteria"
                    destination_host: "<% $.clinical_host %>"
                    destination_user: "<% $.clinical_user %>"
                    destination_path: ""
                    rsync_include_file: /etc/arteria/misc/hiseq.rsync
                    md5_output_file: "checksums.md5"
                on-success:
                  - notify_finished
                  - notify_clinical_finished
                  - mark_as_finished

            ### TRANSFER FILES TO REMOTE DESTINATIONS END ###

            ### START AEACUS REPORT STEPS ###
            irma_run_aeacus_stats:
               action: arteria-packs.poll_status
               input:
                    url: <% $.irma_siswrap_base_url %>/aeacusstats/run/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                    body:
                      runfolder: <% $.runfolder_name %>
                    verify_ssl_cert: True
                    irma_mode: True
               on-success:
                 - irma_run_aeacus_reports

            irma_run_aeacus_reports:
               action: arteria-packs.poll_status
               input:
                  url: <% $.irma_siswrap_base_url %>/aeacusreports/run/<% $.runfolder_name %>?apikey=<% $.irma_api_key %>
                  body:
                    runfolder: <% $.runfolder_name %>
                  verify_ssl_cert: True
                  irma_mode: True
               on-success:
                - upload_runfolder_to_pdc: <% $.skip_archiving = false %>
                - notify_finished: <% $.skip_archiving = true %>
                - mark_as_finished: <% $.skip_archiving = true %>

            ### END AEACUS REPORT STEPS ###

            ## START NGI_PIPELINE IF NECESSARY ##
            # TODO Make sure to setup new URL for ngi_pipeline
            #start_ngi_pipeline:
            #  action: core.http
            #  input:
            #    url: <% $.ngi_pipeline_url %>/<% $.runfolder_name %>
            ## END START NGI_PIPELINE ##

            ## START TSM ARCHIVE TO PDC ##

            upload_runfolder_to_pdc:
                action: arteria-packs.archive_workflow
                input:
                    runfolder: <% $.runfolder %>
                    host: <% $.host %>
                    remove_previous_archive: <% $.remove_previous_archive_dir %>
                on-success:
                  - notify_finished
                  - mark_as_finished

# TODO Add this back to switch to the new archiving workflow that we have
#      disabled for now. /JD 2018-04-25
#            upload_runfolder_to_pdc:
#                action: arteria-packs.archive_upload
#                input:
#                    runfolder: <% $.runfolder_name %>
#                    host: <% $.host %>
#                    remove_previous_archive: <% $.remove_previous_archive_dir %>
#                on-success:
#                  - notify_finished
#                  - mark_as_finished
            ## END TSM ARCHIVE TO PDC ##

            ## NOTIFIER START ###
            notify_finished:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - Finished processing runfolder <% $.runfolder_name %>'"
                    body: "Finished processing on <% $.host %> for <% $.runfolder_name %>"

            notify_clinical_finished:
                action: core.sendmail
                input:
                    to: <% $.send_clinical_mail_to %>
                    subject: "'[NGI] - Finished processing and uploading runfolder <% $.runfolder_name %>'"
                    body: "Finished processing of <% $.runfolder_name %> and uploaded to <% $.clinical_host %>"

            oh_shit_error:
                action: core.sendmail
                input:
                    to: <% $.send_mail_to %>
                    subject: "'[ARTERIA] - OH SHIT ERROR occurred for runfolder <% $.runfolder_name %>'"
                    body: "An oh shit error occurred while processing <% $.runfolder_name %> on host <% $.host %>. Please investigate!"
                on-complete:
                  - fail

            mark_as_finished:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "done"}'
                method: "POST"

            mark_as_failed:
              action: core.http
              input:
                url: http://<% $.host %>:<% $.runfolder_service_port %>/api/1.0/runfolders/path<% $.runfolder %>
                body: '{"state": "error"}'
                method: "POST"
            ### NOTIFIER END ###
